[{"title":"KNN实现","date":"2023-04-21T14:44:47.000Z","url":"/2023/04/21/KNN%E5%AE%9E%E7%8E%B0/","tags":[["算法","/tags/%E7%AE%97%E6%B3%95/"]],"categories":[["科研","/categories/%E7%A7%91%E7%A0%94/"],["代码","/categories/%E7%A7%91%E7%A0%94/%E4%BB%A3%E7%A0%81/"]],"content":"KNN代码实现 "},{"title":"linux命令备忘","date":"2023-04-21T10:58:27.000Z","url":"/2023/04/21/%E6%8A%80%E6%9C%AF/linux/","tags":[["linux","/tags/linux/"]],"categories":[["技术","/categories/%E6%8A%80%E6%9C%AF/"],["linux","/categories/%E6%8A%80%E6%9C%AF/linux/"]],"content":"一些常见命令 添加用户useradd -d 目录 -m -s &#x2F;bin&#x2F;bash 远端服务器本地端口映射转发ssh转发指令 ssh -L 16006:127.0.0.1:6006 username@ip 跨设备文件复制scp &#x2F;内容 user@ip &#x2F;目录 linux任务挂后台screen -S testctrl+a+d 切入后台screen -ls 列出所有screen -r test 重新连接screen -wipe 会话清除 如果由于某种原因其中一个会话死掉了（例如人为杀掉该会话），这时screen -list会显示该会话为dead状态。使用screen -wipe命令清除 "},{"title":"Jupyter notebook添加python虚拟环境","date":"2023-04-21T10:58:27.000Z","url":"/2023/04/21/%E6%8A%80%E6%9C%AF/jupyternotebook%E6%B7%BB%E5%8A%A0%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/","tags":[["python","/tags/python/"]],"categories":[["技术","/categories/%E6%8A%80%E6%9C%AF/"],["python","/categories/%E6%8A%80%E6%9C%AF/python/"]],"content":"将虚拟环境的python解释器添加到jupyter notebook的内核 "},{"title":"禅与摩托车维修艺术","date":"2023-04-21T10:48:23.000Z","url":"/2023/04/21/%E8%AF%BB%E4%B9%A6/%E7%A6%85%E4%B8%8E%E6%91%A9%E6%89%98%E8%BD%A6%E7%BB%B4%E4%BF%AE%E8%89%BA%E6%9C%AF/","tags":[["哲学","/tags/%E5%93%B2%E5%AD%A6/"]],"categories":[["阅读","/categories/%E9%98%85%E8%AF%BB/"],["哲学","/categories/%E9%98%85%E8%AF%BB/%E5%93%B2%E5%AD%A6/"]],"content":"罗伯特·M·波西格 他说：“你相信鬼吗？”我说：“不相信。”“为什么？”“因为他们没有科学依据。”我的答案不禁让约翰笑了起来，我接着说：“他们的存在不占用任何空间，也没有能量，因此根据科学定理，他们只存在于人的心中。”这个时候，酒精、倦意和微风纠缠于我心中，一起影响着我，我又说道：“当然，科学定理也不占用任何空间，也没有能量，因此也只存在于人的心中，所以完全科学的态度就是既不相信鬼，也不相信科学，这样你就安全了。然而这样一来，你就没有多少可以相信的了，但是唯有这样才是科学的态度。” “而科学家所面临的矛盾是心。心既非物，也没有能量，但是他们并不能否认心存在于他们所做的一切之中。逻辑存在于心中，数字也只存在于心中。如果科学家认为鬼也只存在于人的心里，我不会反对这种说法。其中‘只’是一个关键词，科学只存在于你的心里，这种说法并没有错，鬼也是一样。” 他不了解发生了什么事，而且也没有兴趣去研究。他对事情的表象比较感兴趣，对于内涵就不然了。这一点很重要，因为这就是他看事情的方法。我花了好长的时间才发现我们之间的这种不同，所以在这次旅程当中，很重要的一件事就是要明确这种不同。我从理智、知识的角度去看修理把手的问题，其中牵涉到金属的所有科学上的特性。而约翰却从直觉和当下的角度去看待它。我是从内涵着手，而他却是从物的表象开始。我看到的是这个铝片的意义，而他看到的却是这个铝片的外观。 古典的认知认为这个世界是由一些基本形式组成的，而浪漫的认知则是从它的表象来观察。如果你拿一部发动机或是机械图，或是电子仪表给浪漫的人看，他一定不感兴趣，因为他所看到的只是表象，枯燥无味，只是列出一大堆复杂的专有名词、线条和数字，没有让他觉得有趣的事。但是如果你把这些东西拿给一个偏向古典思想的人看，他会仔细地观察，然后就会着迷，因为他看到在这些线条和符号之后是丰富的基本形式。浪漫的模式主要有丰富的灵感、想象力、创造力和直觉。最主要的是情感而非事实。和科学相对的艺术往往就是很浪漫的，它的存在不依赖于理性或是法则，而是依赖于感情、直觉和美学。在北欧的文化当中，浪漫往往和女性有关，但这并不是必然的现象。相对的，古典的思想往往依赖于理性和法则–它们是思想和行为的基本形式，在欧洲的文化当中主要与男性有关，同时科学、法律、医药等各学科都受到了古典思想的影响，因此对大部分的女性来说毫无吸引力。所以虽然骑摩托车旅行是件很浪漫的事，但是要维修、保养摩托车却全然是古典的行为。修理车子的时候，必然会弄脏手，而且全身都是油污，这些基本形式往往和浪漫的精神相冲突，因而女性很不喜欢这样。虽然在古典的认知方式当中，它的表象通常是丑陋的，但是这不是天生的。浪漫的人往往会忽略古典的美感，因为它出现得非常微妙。古典的风格往往直截了当而且完全不加修饰，不情绪化，简洁，有严谨的比例，它的目的并不是要引发别人情绪上的波动，而是要从混乱中找出秩序，所以它的风格并不自由也不自然，反而要求的是规规矩矩，所有的一切都在控制之下，而它的价值标准在于控制技巧的高低。对于一个浪漫的人来说，这种古典的方式往往显得很沉闷，呆滞而且丑陋。就像保养车子一样，车子的一切都可以分解成零部件和它们之间的关系。所有的一切都必须经过测量和证明，这就给人一种沉重的压迫感，一种永无止尽的灰暗，这就是一股死亡的势力。然而对于一个古典的人来说，浪漫的人就很轻浮而没有理性，心情起伏不定，不值得信任，只对享乐感兴趣，是一种肤浅的人，就像寄生虫一样没有内涵，无法养活自己，是社会的负担。从这里我们就差不多可以看出他们彼此之间的冲突了。这就是问题的根源，人在思考和感觉的时候往往会偏向于某一种形式，而且会误解和看轻另一种形式。然而没有人会放弃自己所看到的真理，就我所知，目前还没有人可以真正融合两者，因为这两者之间根本就找不到交会点。所以在近代古典和浪漫的文化之间，产生了严重的冲突–这两个世界逐渐分离，互相仇视，所有的人都在怀疑是否要继续这样发展下去。事实上没有人希望如此–不论他的敌手如何想。 "},{"title":"村上春树选摘","date":"2023-04-21T10:48:05.000Z","url":"/2023/04/21/%E8%AF%BB%E4%B9%A6/%E6%9D%91%E4%B8%8A%E6%98%A5%E6%A0%91/","tags":[["文学","/tags/%E6%96%87%E5%AD%A6/"]],"categories":[["阅读","/categories/%E9%98%85%E8%AF%BB/"],["文学","/categories/%E9%98%85%E8%AF%BB/%E6%96%87%E5%AD%A6/"]],"content":"1、哪里会有人喜欢孤独，不过是不喜欢失望罢了。——《挪威的森林》 2、鱼说，你看不到我眼中的泪，因为我在水中。水说，我能感觉到你的泪，因为你在我心中。——《鱼和水的爱恋》 3、白昼之光，岂知夜色之深。——《且听风吟》 4、孤独一人也没关系，只要能发自内心地爱着一个人，人生就会有救。哪怕不能和他生活在一起。——《1Q84》 5、我一直以为人是慢慢变老的，其实不是，人是一瞬间变老的。——《舞！舞！舞！》 6、你要做一个不动声色的大人了，不准情绪化，不准偷偷想念，不住回头看。去过自己另外的生活，你要听话，不是所有的鱼都会生活在同一片海里。——《舞！舞！舞！》 7、不要同情自己，同情自己是卑劣懦夫干的勾当。——《挪威的森林》 8、年龄一大，相信的东西就越来越少。和牙齿磨损一个样。既非玩世不恭，又不是疑神疑鬼，只是磨损而已。——《世界尽头与冷酷仙境》 9、所谓人生，无非是一个不断丧失的过程。很宝贵的东西，会一个接一个，像梳子豁了齿一样，从你手中滑落。取而代之落入你手中的，全是些不值一提的伪劣品。体能，希望，美梦和理想，信念和意义，或你所爱的人，一样接着一样，一人接着一人，从你身旁悄然消逝。——《1Q84》 10、刚刚好，看见你幸福的样子，于是幸福着你的幸福。——《国境以南太阳以西》 11、对相爱的人来说，对方的心才是最好的房子。——村上春树 12、在某种情况下，一个人的存在本身就要伤害另一个人。——《国境以南太阳以西》 13、或许我的心包有一层硬壳，能破壳而入的东西是极其有限的。所以我才不能对人一往情深。—— 《挪威的森林》 14、在我们寻找，伤害，背离之后，还能一如既往地相信爱情，这是一种勇气。——《挪威的森林》 15、我的人生是我的，你的人生是你的。只要你清楚自己在寻求什么，那就尽管按自己的意愿去生活。别人怎么说与你无关。——《舞！舞！舞！》 16、每个人都有属于自己的一片森林，也许我们 从来不曾去过，但它一直在那里，总会在那里。迷失的人迷失了，相逢的人会再相逢。——《挪威的森林》 17、如果你掉进了黑暗里，你能做的，不过是静心等待，直到你的双眼适应黑暗。——《挪威的森林》 18、违背了自己定下的原则，哪怕只有一次，以后就将违背更多的原则。——《当我谈跑步时我谈些什么》 19、平庸这东西犹如白衬衣上的污痕，一旦染上便永远洗不掉，无可挽回。——《舞！舞！舞！》 20、尽管眼下十分困难，但日后必定会开花结果。——《我的职业是小说家》 21、我们领教了世界是何等凶顽，同时又得知世界也可以变得温存和美好。——《海边的卡夫卡》 22、不存在十全十美的文章，如同不存在彻头彻尾的绝望。——《且听风吟》 23、你要记得那些黑暗中默默抱紧你的人，逗你笑的人，陪你彻夜聊天的人，坐车来看望你的人，陪你哭过的人，在医院陪你的人，总是以你为重的人，带着你四处游荡的人， 说想念你的人。是这些人组成你生命中一点一滴的温暖 ，是这些温暖使你远离阴霾， 是这些温暖使你成为善良的人。——村上春树 24、不必太纠结于当下，也不必太忧虑未来，当你经历过一些事情的时候，眼前的风景已经和从前不一样了。——《1Q84》 25、总之岁月漫长，然而值得等待。——《如果我们的语言是威士忌》"},{"title":"死亡诗社","date":"2023-04-21T10:47:58.000Z","url":"/2023/04/21/%E8%AF%BB%E4%B9%A6/%E6%AD%BB%E4%BA%A1%E8%AF%97%E7%A4%BE/","tags":[["文学","/tags/%E6%96%87%E5%AD%A6/"]],"categories":[["阅读","/categories/%E9%98%85%E8%AF%BB/"],["文学","/categories/%E9%98%85%E8%AF%BB/%E6%96%87%E5%AD%A6/"]],"content":" 我们读诗写诗，并不是因为它好玩我们读诗写诗是因为我们是人类的一分子而人类是充满激情的没错，医学，法律，商业，工程，这些都是崇高的追求，足以支撑人的一生但诗歌美丽、浪漫、爱这些才是我们生活的意义 “现在，过来看看墙上的照片。你们可能从这里走过很多次，但都没有仔细看过他们吧”。“他们跟你们没什么差别，对吧？一样的发型，一样的野心勃勃，相信世界在自己手中，相信会成就一番大事业”。“现在他们都变成了尘土，但是仔细听，你还能听见他们的忠告”。“珍惜时间，让你的生命不同寻常”。 "},{"title":"碎语","date":"2023-04-21T10:47:43.000Z","url":"/2023/04/21/%E8%AF%BB%E4%B9%A6/%E7%A2%8E%E8%AF%AD/","tags":[["文学","/tags/%E6%96%87%E5%AD%A6/"]],"categories":[["阅读","/categories/%E9%98%85%E8%AF%BB/"],["文学","/categories/%E9%98%85%E8%AF%BB/%E6%96%87%E5%AD%A6/"]],"content":" 学术生活就是一场疯狂的赌博。学者们既不知道什么时候灵感降临，也不知道什么时候会被他们的科学职业丢弃，只能把自己的才华交付给运气。数学研究符合这场赌博的一切特征。 ——韦伯《科学作为天职》 我常想在纷扰中寻出一点闲静来，然而委实不容易。目前是这么离奇，心里是这么芜杂。一个人做到只剩了回忆的时候，生涯大概总要算是无聊了罢，但有时竟会连回忆也没有。 虫蛆也许是不干净的，但它们并没有自鸣清高；鸷禽猛兽以较弱的动物为饵，不妨说是凶残的罢，但它们从来就没有竖过“公理”“正义”的旗子，使牺牲者直到被吃的时候为止，还是一味佩服赞叹它们。 ——鲁迅《朝花夕拾》 创作一部动画也就是创造一个虚拟的世界，这个世界慰藉着那些失去勇气的、与残忍现实搏斗的灵魂。 残忍与温柔自以一种毫不冲突的方式并存在这个世上，这种现实主义不会一味地迎合观众的口味，而是让观众们毫不畏惧地去面对自己的存在。 共情来自观众在故事人物身上投射的情感，而现实是对我们人生不可预测性的真实描写。 ——某篇描写宫崎骏动画的文章 "},{"title":"python知识补全","date":"2023-04-20T14:35:25.000Z","url":"/2023/04/20/%E6%8A%80%E6%9C%AF/python%E7%9F%A5%E8%AF%86%E8%A1%A5%E5%85%A8/","tags":[["python","/tags/python/"]],"categories":[["技术","/categories/%E6%8A%80%E6%9C%AF/"],["python","/categories/%E6%8A%80%E6%9C%AF/python/"]],"content":"一些易忘知识点 list.extend()描述extend() 函数用于在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）。 语法extend()方法语法：list.extend(seq) 参数 seq – 元素列表。 返回值该方法没有返回值，但会在已存在的列表中添加新的列表内容。 实例以下实例展示了 extend()函数的使用方法：#!&#x2F;usr&#x2F;bin&#x2F;python aList &#x3D; [123, ‘xyz’, ‘zara’, ‘abc’, 123]; bList &#x3D; [2009, ‘manni’]; aList.extend(bList) print “Extended List : “, aList ;以上实例输出结果如下：Extended List : [123, ‘xyz’, ‘zara’, ‘abc’, 123, 2009, ‘manni’] numpy.tile()numpy.tile()是个什么函数呢，说白了，就是把数组沿各个方向复制 比如 a &#x3D; np.array([0,1,2]), np.tile(a,(2,1))就是把a先沿x轴（就这样称呼吧）复制1倍，即没有复制，仍然是 [0,1,2]。 再把结果沿y方向复制2倍，即最终得到 array([[0,1,2], [0,1,2]]) 列表去重list(set([a,a,a,b,b,c])) collections.Counter()可以快速统计词频。 1. Python基础字符串与编码编码在最新的Python 3版本中，字符串是以Unicode编码的，也就是说，Python的字符串支持多语言，例如： print(‘包含中文的str’)包含中文的str对于单个字符的编码，Python提供了ord()函数获取字符的整数表示，chr()函数把编码转换为对应的字符： &gt;&gt;&gt; ord(‘A’)65&gt;&gt;&gt; ord(‘中’)20013&gt;&gt;&gt; chr(66)‘B’&gt;&gt;&gt; chr(25991)‘文’ 格式化在Python中，采用的格式化方式和C语言是一致的，用%实现，举例如下： ‘Hello, %s’ % ‘world’’Hello, world’‘Hi, %s, you have $%d.’ % (‘Michael’, 1000000)’Hi, Michael, you have $1000000.’你如果只有一个%?，括号可以省略。常见的占位符有： 占位符 替换内容 %d 整数 %f 浮点数 %s 字符串 %x 十六进制整数 如果你不太确定应该用什么，%s永远起作用，它会把任何数据类型转换为字符串： ‘Age: %s. Gender: %s’ % (25, True)‘Age: 25. Gender: True’有些时候，字符串里面的%是一个普通字符怎么办？这个时候就需要转义，用%%来表示一个%：‘growth rate: %d %%’ % 7‘growth rate: 7 %’ format()另一种格式化字符串的方法是使用字符串的format()方法，它会用传入的参数依次替换字符串内的占位符{0}、{1}……，不过这种方式写起来比%要麻烦得多： ‘Hello, {0}, 成绩提升了 {1:.1f}%’.format(‘小明’, 17.125)‘Hello, 小明, 成绩提升了 17.1%’ f-string最后一种格式化字符串的方法是使用以f开头的字符串，称之为f-string，它和普通字符串不同之处在于，字符串如果包含{xxx}，就会以对应的变量替换： r &#x3D; 2.5&gt;&gt;&gt; s &#x3D; 3.14 * r ** 2print(f’The area of a circle with radius {r} is {s:.2f}’)The area of a circle with radius 2.5 is 19.62上述代码中，{r}被变量r的值替换，{s:.2f}被变量s的值替换，并且:后面的.2f指定了格式化参数（即保留两位小数），因此，{s:.2f}的替换结果是19.62。 List and tuplelist如果要取最后一个元素，除了计算索引位置外，还可以用-1做索引，直接获取最后一个元素： classmates[-1]’Tracy’list是一个可变的有序表，所以，可以往list中追加元素到末尾：classmates.append(‘Adam’)classmates[‘Michael’, ‘Bob’, ‘Tracy’, ‘Adam’]也可以把元素插入到指定的位置，比如索引号为1的位置：classmates.insert(1, ‘Jack’)classmates[‘Michael’, ‘Jack’, ‘Bob’, ‘Tracy’, ‘Adam’]要删除list末尾的元素，用pop()方法：classmates.pop()‘Adam’classmates[‘Michael’, ‘Jack’, ‘Bob’, ‘Tracy’]要删除指定位置的元素，用pop(i)方法，其中i是索引位置：classmates.pop(1)‘Jack’classmates[‘Michael’, ‘Bob’, ‘Tracy’]要把某个元素替换成别的元素，可以直接赋值给对应的索引位置：classmates[1] &#x3D; ‘Sarah’classmates[‘Michael’, ‘Sarah’, ‘Tracy’]list里面的元素的数据类型也可以不同，比如：L &#x3D; [‘Apple’, 123, True]list元素也可以是另一个list，比如：s &#x3D; [‘python’, ‘java’, [‘asp’, ‘php’], ‘scheme’]len(s)4要注意s只有4个元素，其中s[2]又是一个list，如果拆开写就更容易理解了：p &#x3D; [‘asp’, ‘php’]s &#x3D; [‘python’, ‘java’, p, ‘scheme’]要拿到’php’可以写p[1]或者s[2][1]，因此s可以看成是一个二维数组 Tupletuple一旦初始化就不能修改，也没有append()，insert()这样的方法。其他获取元素的方法和list是一样的只有1个元素的tuple定义时必须加一个逗号,，来消除歧义： t &#x3D; (1,)t(1,) 条件判断if &lt;条件判断1&gt;:&lt;执行1&gt;elif &lt;条件判断2&gt;:&lt;执行2&gt;else:&lt;执行3&gt; 循环range能生成0到n的数列 break语句可以在循环过程中直接退出循环，而continue语句可以提前结束本轮循环，并直接开始下一轮循环。这两个语句通常都必须配合if语句使用。要特别注意，不要滥用break和continue语句。break和continue会造成代码执行逻辑分叉过多，容易出错。大多数循环并不需要用到break和continue语句，上面的两个例子，都可以通过改写循环条件或者修改循环逻辑，去掉break和continue语句。 dict和set**dict **如果key不存在，dict就会报错： d[‘Thomas’]Traceback (most recent call last):File ““, line 1, in KeyError: ‘Thomas’要避免key不存在的错误，有两种办法，一是通过in判断key是否存在：‘Thomas’ in dFalse二是通过dict提供的get()方法，如果key不存在，可以返回None，或者自己指定的value：d.get(‘Thomas’)d.get(‘Thomas’, -1)-1注意：返回None的时候Python的交互环境不显示结果。要删除一个key，用pop(key)方法，对应的value也会从dict中删除：d.pop(‘Bob’)75d{‘Michael’: 95, ‘Tracy’: 85} set重复元素在set中自动被过滤： s &#x3D; set([1, 1, 2, 2, 3, 3])s{1, 2, 3}通过add(key)方法可以添加元素到set中，可以重复添加，但不会有效果：s.add(4)s{1, 2, 3, 4}通过remove(key)方法可以删除元素：s.remove(4)s{1, 2, 3}set可以看成数学意义上的无序和无重复元素的集合，因此，两个set可以做数学意义上的交集、并集等操作：s1 &#x3D; set([1, 2, 3])s2 &#x3D; set([2, 3, 4])s1 &amp; s2{2, 3}s1 | s2{1, 2, 3, 4} 2. 函数if not isinstance(x, (int, float)):isinstance可以判断A和B是否一致，或者A是否在B元组中 返回多个值函数可以返回多个值吗？答案是肯定的。比如在游戏中经常需要从一个点移动到另一个点，给出坐标、位移和角度，就可以计算出新的坐标：import mathdef move(x, y, step, angle&#x3D;0):nx &#x3D; x + step * math.cos(angle)ny &#x3D; y - step * math.sin(angle)return nx, nyimport math语句表示导入math包，并允许后续代码引用math包里的sin、cos等函数。然后，我们就可以同时获得返回值： x, y &#x3D; move(100, 100, 60, math.pi &#x2F; 6)print(x, y)151.96152422706632 70.0但其实这只是一种假象，Python函数返回的仍然是单一值：r &#x3D; move(100, 100, 60, math.pi &#x2F; 6)print(r)(151.96152422706632, 70.0)原来返回值是一个tuple！但是，在语法上，返回一个tuple可以省略括号，而多个变量可以同时接收一个tuple，按位置赋给对应的值，所以，Python的函数返回多值其实就是返回一个tuple，但写起来更方便。 函数的参数内容太多，参见 默认参数 默认参数可以简化函数的调用。设置默认参数时，有几点要注意：一是必选参数在前，默认参数在后，否则Python的解释器会报错（思考一下为什么默认参数不能放在必选参数前面）；二是如何设置默认参数。当函数有多个参数时，把变化大的参数放前面，变化小的参数放后面。变化小的参数就可以作为默认参数。使用默认参数有什么好处？最大的好处是能降低调用函数的难度。 默认参数很有用，但使用不当，也会掉坑里。默认参数有个最大的坑，演示如下：先定义一个函数，传入一个list，添加一个END再返回：def add_end(L&#x3D;[]): L.append(‘END’) return L当你正常调用时，结果似乎不错： add_end([1, 2, 3])[1, 2, 3, ‘END’]add_end([‘x’, ‘y’, ‘z’])[‘x’, ‘y’, ‘z’, ‘END’]当你使用默认参数调用时，一开始结果也是对的：add_end() [‘END’]但是，再次调用add_end()时，结果就不对了：add_end() [‘END’, ‘END’]add_end()[‘END’, ‘END’, ‘END’]很多初学者很疑惑，默认参数是[]，但是函数似乎每次都“记住了”上次添加了’END’后的list。原因解释如下：Python函数在定义的时候，默认参数L的值就被计算出来了，即[]，因为默认参数L也是一个变量，它指向对象[]，每次调用该函数，如果改变了L的内容，则下次调用时，默认参数的内容就变了，不再是函数定义时的[]了。 定义默认参数要牢记一点：默认参数必须指向不变对象！要修改上面的例子，我们可以用None这个不变对象来实现： 可变参数*参数为可变参数 用来传入N个参数我们把函数的参数改为可变参数：def calc(numbers): sum &#x3D; 0 for n in numbers: sum &#x3D; sum + n * n return sum定义可变参数和定义一个list或tuple参数相比，仅仅在参数前面加了一个号。在函数内部，参数numbers接收到的是一个tuple，因此，函数代码完全不变。但是，调用该函数时，可以传入任意个参数，包括0个参数： calc(1, 2)5calc()0如果已经有一个list或者tuple，要调用一个可变参数怎么办？可以这样做：nums &#x3D; [1, 2, 3]calc(nums[0], nums[1], nums[2]) 14这种写法当然是可行的，问题是太繁琐，所以Python允许你在list或tuple前面加一个*号，把list或tuple的元素变成可变参数传进去：nums &#x3D; [1, 2, 3]calc(*nums)14*nums表示把nums这个list的所有元素作为可变参数传进去。这种写法相当有用，而且很常见。 关键字参数**参数为关键字参数，用来传入字典 命名关键字参数对于关键字参数，函数的调用者可以传入任意不受限制的关键字参数。至于到底传入了哪些，就需要在函数内部通过kw检查。仍以person()函数为例，我们希望检查是否有city和job参数： 参数组合 高级语言特性切片 迭代列表生成式生成器迭代器"}]